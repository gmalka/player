// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: playserService.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MusicPlayerService_LoadSong_FullMethodName = "/proto.MusicPlayerService/LoadSong"
	MusicPlayerService_GetSongs_FullMethodName = "/proto.MusicPlayerService/GetSongs"
)

// MusicPlayerServiceClient is the client API for MusicPlayerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicPlayerServiceClient interface {
	LoadSong(ctx context.Context, in *SongRequest, opts ...grpc.CallOption) (MusicPlayerService_LoadSongClient, error)
	GetSongs(ctx context.Context, in *None, opts ...grpc.CallOption) (MusicPlayerService_GetSongsClient, error)
}

type musicPlayerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicPlayerServiceClient(cc grpc.ClientConnInterface) MusicPlayerServiceClient {
	return &musicPlayerServiceClient{cc}
}

func (c *musicPlayerServiceClient) LoadSong(ctx context.Context, in *SongRequest, opts ...grpc.CallOption) (MusicPlayerService_LoadSongClient, error) {
	stream, err := c.cc.NewStream(ctx, &MusicPlayerService_ServiceDesc.Streams[0], MusicPlayerService_LoadSong_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &musicPlayerServiceLoadSongClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MusicPlayerService_LoadSongClient interface {
	Recv() (*LoadSongResponse, error)
	grpc.ClientStream
}

type musicPlayerServiceLoadSongClient struct {
	grpc.ClientStream
}

func (x *musicPlayerServiceLoadSongClient) Recv() (*LoadSongResponse, error) {
	m := new(LoadSongResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *musicPlayerServiceClient) GetSongs(ctx context.Context, in *None, opts ...grpc.CallOption) (MusicPlayerService_GetSongsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MusicPlayerService_ServiceDesc.Streams[1], MusicPlayerService_GetSongs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &musicPlayerServiceGetSongsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MusicPlayerService_GetSongsClient interface {
	Recv() (*SongRequest, error)
	grpc.ClientStream
}

type musicPlayerServiceGetSongsClient struct {
	grpc.ClientStream
}

func (x *musicPlayerServiceGetSongsClient) Recv() (*SongRequest, error) {
	m := new(SongRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MusicPlayerServiceServer is the server API for MusicPlayerService service.
// All implementations must embed UnimplementedMusicPlayerServiceServer
// for forward compatibility
type MusicPlayerServiceServer interface {
	LoadSong(*SongRequest, MusicPlayerService_LoadSongServer) error
	GetSongs(*None, MusicPlayerService_GetSongsServer) error
	mustEmbedUnimplementedMusicPlayerServiceServer()
}

// UnimplementedMusicPlayerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMusicPlayerServiceServer struct {
}

func (UnimplementedMusicPlayerServiceServer) LoadSong(*SongRequest, MusicPlayerService_LoadSongServer) error {
	return status.Errorf(codes.Unimplemented, "method LoadSong not implemented")
}
func (UnimplementedMusicPlayerServiceServer) GetSongs(*None, MusicPlayerService_GetSongsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSongs not implemented")
}
func (UnimplementedMusicPlayerServiceServer) mustEmbedUnimplementedMusicPlayerServiceServer() {}

// UnsafeMusicPlayerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicPlayerServiceServer will
// result in compilation errors.
type UnsafeMusicPlayerServiceServer interface {
	mustEmbedUnimplementedMusicPlayerServiceServer()
}

func RegisterMusicPlayerServiceServer(s grpc.ServiceRegistrar, srv MusicPlayerServiceServer) {
	s.RegisterService(&MusicPlayerService_ServiceDesc, srv)
}

func _MusicPlayerService_LoadSong_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SongRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MusicPlayerServiceServer).LoadSong(m, &musicPlayerServiceLoadSongServer{stream})
}

type MusicPlayerService_LoadSongServer interface {
	Send(*LoadSongResponse) error
	grpc.ServerStream
}

type musicPlayerServiceLoadSongServer struct {
	grpc.ServerStream
}

func (x *musicPlayerServiceLoadSongServer) Send(m *LoadSongResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MusicPlayerService_GetSongs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(None)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MusicPlayerServiceServer).GetSongs(m, &musicPlayerServiceGetSongsServer{stream})
}

type MusicPlayerService_GetSongsServer interface {
	Send(*SongRequest) error
	grpc.ServerStream
}

type musicPlayerServiceGetSongsServer struct {
	grpc.ServerStream
}

func (x *musicPlayerServiceGetSongsServer) Send(m *SongRequest) error {
	return x.ServerStream.SendMsg(m)
}

// MusicPlayerService_ServiceDesc is the grpc.ServiceDesc for MusicPlayerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MusicPlayerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MusicPlayerService",
	HandlerType: (*MusicPlayerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoadSong",
			Handler:       _MusicPlayerService_LoadSong_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSongs",
			Handler:       _MusicPlayerService_GetSongs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "playserService.proto",
}
